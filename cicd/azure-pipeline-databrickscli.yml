trigger:
  - none

pr: none

pool:
  vmImage: ubuntu-latest

stages:
#  - stage: CI
#    displayName: "Continuous Integration"
#    jobs:
#      - job: CIJob
#        displayName: "Countinuous Integration Steps"
#        steps:           
#          - script: |
#              sudo apt-get update
#              sudo apt-get install -y jq
#            displayName: 'Instalar jq'
#          - script: |
#              rm /usr/local/bin/databricks
#              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
#            displayName: 'download and install databricks-cli'

  - stage: CD
    displayName: "Continuous Deployment"      
    #dependsOn: CI
    jobs:
    #- job: DeployToDev
    #  displayName: "Deploy to Dev Environment"
    #  steps:
    #    - script: |
    #        curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
    #      displayName: 'download and install databricks-cli'

    #    - script: |
    #        echo $(DEV_BEARER_TOKEN) | databricks configure --host $(DEV_DATABRICKS_URL) --token $(DEV_BEARER_TOKEN) 
    #      displayName: 'Configure DataBricks DEV CLI'

    #    - script: |
    #        databricks workspace mkdirs "/$(TARGET_FILES_PATH)/"
    #      displayName: 'Create App Dir if it does not exist'

    #    - script: |
    #        databricks workspace delete "/$(TARGET_FILES_PATH)/" --recursive
    #      displayName: 'Clean Workspace'

    #    - script: |
    #        databricks workspace import-dir --overwrite ./$(SOURCE_FILES_PATH)/ "/$(TARGET_FILES_PATH)/"
    #      displayName: 'Copy to Workspace'

    - job: DeployToProd
      displayName: "Deploy to Prod Environment"
    #  dependsOn: "DeployToDev"
      steps:
        - script: |
              sudo apt-get update
              sudo apt-get install -y jq
          displayName: 'Instalar jq'

        - script: |
            rm /usr/local/bin/databricks
            curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          displayName: 'download and install databricks-cli'

      #  - script: |
      #      echo -e "$(PRO_DATABRICKS_URL)\n$(PRO_BEARER_TOKEN)" | databricks configure --token 
      #    displayName: 'Configure DataBricks DEV CLI'

        - script: |
            echo $(PRO_BEARER_TOKEN) | databricks configure --host $(PRO_DATABRICKS_URL) --token $(PRO_BEARER_TOKEN) 
          displayName: 'Configure DataBricks PRO CLI'

        - script: |
            echo "Imprimindo o conteúdo do arquivo JSON:"
            cat cicd/job-config.json
          displayName: 'Imprimir arquivo JSON'

        - script: |
            jq '.tasks[].existing_cluster_id = "0906-171407-w744i9cy"' $(DATABRICKS_JOB_FILE) > updated-job-config.json 
            mv updated-job-config.json $(DATABRICKS_JOB_FILE)
          displayName: 'Update existing_cluster_id in Json file'

        - script: |
            echo "Imprimindo o conteúdo do arquivo JSON:"
            cat cicd/job-config.json
          displayName: 'Imprimir arquivo JSON'

        - script: |
            JOB_ID=$(databricks jobs list | grep $(DATABRICKS_JOB_NAME) | awk '{print $1}')
            echo "O ID do Job é: $JOB_ID"
            ls -la $(Build.SourcesDirectory)
            echo "Arquivos no diretório cicd (artefatos):"
            ls -la $(Build.SourcesDirectory)/cicd
            if [ -z "$JOB_ID" ]; then
              echo "Job não encontrado, criando novo..."
              #echo "Usando o arquivo JSON em: $(DATABRICKS_JOB_FILE)"
              databricks jobs create --json-file cicd/job-config.json
            else
              echo "Job encontrado, atualizando..."
              #echo "Usando o arquivo JSON em: $(DATABRICKS_JOB_FILE)"
              jq '{job_id: 218158619014638, new_settings: .}' $(DATABRICKS_JOB_FILE) > updated-job-config.json
              #jq 'del(.format)' $(DATABRICKS_JOB_FILE) > updated-job-config.json
              mv updated-job-config.json $(DATABRICKS_JOB_FILE)
              cat cicd/job-config.json
              databricks jobs reset --json cicd/job-config.json
            fi
          displayName: 'Create or Update Job in Databricks'

        